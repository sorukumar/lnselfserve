name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: pleb-dashboard
  DATASET_NAME: lightning_data

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Configure Docker for GCP
      run: gcloud auth configure-docker

    - name: 'Install BigQuery Command Line Tool'
      run: |
        gcloud components install bq
        gcloud components update

    - name: 'Create BigQuery Dataset if not exists'
      run: |
        if ! bq ls -d | grep -q "${DATASET_NAME}"; then
          bq mk \
            --dataset \
            --description="Lightning Network Analytics Data" \
            --location=US \
            ${PROJECT_ID}:${DATASET_NAME}
        fi

    - name: Build and Push Container
      working-directory: ./docker/superset
      run: |
        docker build \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=$(git rev-parse --short HEAD) \
          -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} \
          -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }}
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Deploy to Cloud Run
      id: deploy
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --min-instances 1 \
          --max-instances 10 \
          --set-env-vars "^##^GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" \
          --set-env-vars "SUPERSET_DB_URI=${{ secrets.SUPERSET_DB_URI }}" \
          --set-env-vars "GOOGLE_APPLICATION_CREDENTIALS=/app/secrets/sa-key.json" \
          --set-env-vars "SUPERSET_SECRET_KEY=${{ secrets.SUPERSET_SECRET_KEY }}" \
          --set-env-vars "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}" \
          --set-env-vars "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" \
          --set-env-vars "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" \
          --set-env-vars "GUNICORN_WORKERS=4" \
          --set-env-vars "GUNICORN_TIMEOUT=120" \
          --set-secrets "SA_KEY=GCP_SA_KEY:latest"

    - name: 'Verify Deployment'
      run: |
        echo "Checking service URL..."
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format='value(status.url)')
        echo "Service deployed to: $SERVICE_URL"
        
        # Wait for service to be ready
        for i in {1..30}; do
          if curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/health | grep -q "200"; then
            echo "Service is healthy!"
            exit 0
          fi
          echo "Waiting for service to be ready... ($i/30)"
          sleep 10
        done
        echo "Service health check failed"
        exit 1

    - name: 'Post Deployment Notification'
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Deployment successful!"
          echo "Service URL: $(gcloud run services describe $SERVICE_NAME --region $REGION --format='value(status.url)')"
        else
          echo "❌ Deployment failed!"
        fi
